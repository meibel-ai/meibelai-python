"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .dsldefinition import DslDefinition
from meibelai.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import Any, Dict
from typing_extensions import NotRequired, TypedDict


class UpdateBlueprintRequestTypedDict(TypedDict):
    r"""UpdateBlueprintRequest"""

    name: NotRequired[Nullable[str]]
    version: NotRequired[Nullable[str]]
    description: NotRequired[Nullable[str]]
    dsl_definition: NotRequired[Nullable[DslDefinition]]
    yaml_spec_content: NotRequired[Nullable[str]]
    json_spec_content: NotRequired[Nullable[Dict[str, Any]]]


class UpdateBlueprintRequest(BaseModel):
    r"""UpdateBlueprintRequest"""

    name: OptionalNullable[str] = UNSET

    version: OptionalNullable[str] = UNSET

    description: OptionalNullable[str] = UNSET

    dsl_definition: OptionalNullable[DslDefinition] = UNSET

    yaml_spec_content: OptionalNullable[str] = UNSET

    json_spec_content: OptionalNullable[Dict[str, Any]] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "name",
            "version",
            "description",
            "dsl_definition",
            "yaml_spec_content",
            "json_spec_content",
        ]
        nullable_fields = [
            "name",
            "version",
            "description",
            "dsl_definition",
            "yaml_spec_content",
            "json_spec_content",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
