"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .objectstoragefilters import ObjectStorageFilters, ObjectStorageFiltersTypedDict
from .s3config import S3Config, S3ConfigTypedDict
from meibelai.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import Any, Dict
from typing_extensions import NotRequired, TypedDict


class ObjectStorageConfigTypedDict(TypedDict):
    r"""ObjectStorageConfig"""

    bucket: str
    prefix: Nullable[str]
    filters: NotRequired[Nullable[ObjectStorageFiltersTypedDict]]
    gcs_config: NotRequired[Nullable[Dict[str, Any]]]
    s3_config: NotRequired[Nullable[S3ConfigTypedDict]]


class ObjectStorageConfig(BaseModel):
    r"""ObjectStorageConfig"""

    bucket: str

    prefix: Nullable[str]

    filters: OptionalNullable[ObjectStorageFilters] = UNSET

    gcs_config: OptionalNullable[Dict[str, Any]] = UNSET

    s3_config: OptionalNullable[S3Config] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["filters", "gcs_config", "s3_config"]
        nullable_fields = ["prefix", "filters", "gcs_config", "s3_config"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
