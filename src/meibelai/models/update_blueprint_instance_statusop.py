"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .blueprintinstancestatus import BlueprintInstanceStatus
from meibelai.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from meibelai.utils import (
    FieldMetadata,
    HeaderMetadata,
    PathParamMetadata,
    QueryParamMetadata,
)
import pydantic
from pydantic import model_serializer
from typing_extensions import Annotated, NotRequired, TypedDict


class UpdateBlueprintInstanceStatusRequestTypedDict(TypedDict):
    blueprint_instance_id: str
    updated_status_value: BlueprintInstanceStatus
    r"""BlueprintInstanceStatus"""
    customer_id: str
    r"""Customer ID"""
    workflow_run_id: NotRequired[Nullable[str]]


class UpdateBlueprintInstanceStatusRequest(BaseModel):
    blueprint_instance_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]

    updated_status_value: Annotated[
        BlueprintInstanceStatus,
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""BlueprintInstanceStatus"""

    customer_id: Annotated[
        str,
        pydantic.Field(alias="customer-id"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ]
    r"""Customer ID"""

    workflow_run_id: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["workflow_run_id"]
        nullable_fields = ["workflow_run_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
