"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import io
from meibelai.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from meibelai.utils import FieldMetadata, MultipartFormMetadata
import pydantic
from pydantic import model_serializer
from typing import IO, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypedDict


class FilesTypedDict(TypedDict):
    file_name: str
    content: Union[bytes, IO[bytes], io.BufferedReader]
    content_type: NotRequired[str]


class Files(BaseModel):
    file_name: Annotated[
        str, pydantic.Field(alias="fileName"), FieldMetadata(multipart=True)
    ]

    content: Annotated[
        Union[bytes, IO[bytes], io.BufferedReader],
        pydantic.Field(alias=""),
        FieldMetadata(multipart=MultipartFormMetadata(content=True)),
    ]

    content_type: Annotated[
        Optional[str],
        pydantic.Field(alias="Content-Type"),
        FieldMetadata(multipart=True),
    ] = None


class BodyUploadDatasourceContentTypedDict(TypedDict):
    files: List[FilesTypedDict]
    r"""Files to upload to the datasource"""
    prefix: NotRequired[Nullable[str]]
    r"""Path prefix for organizing uploaded files"""
    extract_zip: NotRequired[Nullable[bool]]
    r"""Auto-extract ZIP archives"""
    extract_eml: NotRequired[Nullable[bool]]
    r"""Extract EML email files"""
    max_concurrent: NotRequired[Nullable[int]]
    r"""Maximum concurrent file uploads"""


class BodyUploadDatasourceContent(BaseModel):
    files: Annotated[
        List[Files], FieldMetadata(multipart=MultipartFormMetadata(file=True))
    ]
    r"""Files to upload to the datasource"""

    prefix: Annotated[OptionalNullable[str], FieldMetadata(multipart=True)] = UNSET
    r"""Path prefix for organizing uploaded files"""

    extract_zip: Annotated[OptionalNullable[bool], FieldMetadata(multipart=True)] = (
        UNSET
    )
    r"""Auto-extract ZIP archives"""

    extract_eml: Annotated[OptionalNullable[bool], FieldMetadata(multipart=True)] = (
        UNSET
    )
    r"""Extract EML email files"""

    max_concurrent: Annotated[OptionalNullable[int], FieldMetadata(multipart=True)] = (
        UNSET
    )
    r"""Maximum concurrent file uploads"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["prefix", "extract_zip", "extract_eml", "max_concurrent"]
        nullable_fields = ["prefix", "extract_zip", "extract_eml", "max_concurrent"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
