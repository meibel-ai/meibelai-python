"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import io
from meibelai.types import BaseModel
from meibelai.utils import (
    FieldMetadata,
    MultipartFormMetadata,
    PathParamMetadata,
    RequestMetadata,
)
import pydantic
from typing import IO, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypedDict


class FilesTypedDict(TypedDict):
    file_name: str
    content: Union[bytes, IO[bytes], io.BufferedReader]
    content_type: NotRequired[str]


class Files(BaseModel):
    file_name: Annotated[
        str, pydantic.Field(alias="fileName"), FieldMetadata(multipart=True)
    ]

    content: Annotated[
        Union[bytes, IO[bytes], io.BufferedReader],
        pydantic.Field(alias=""),
        FieldMetadata(multipart=MultipartFormMetadata(content=True)),
    ]

    content_type: Annotated[
        Optional[str],
        pydantic.Field(alias="Content-Type"),
        FieldMetadata(multipart=True),
    ] = None


class UploadDatasourceContentRequestBodyTypedDict(TypedDict):
    files: List[FilesTypedDict]
    r"""Files to upload to the datasource"""
    prefix: NotRequired[str]
    r"""Path prefix for organizing uploaded files"""
    extract_zip: NotRequired[bool]
    r"""Auto-extract ZIP archives"""
    extract_eml: NotRequired[bool]
    r"""Extract EML email files"""
    max_concurrent: NotRequired[int]
    r"""Maximum concurrent file uploads"""


class UploadDatasourceContentRequestBody(BaseModel):
    files: Annotated[
        List[Files], FieldMetadata(multipart=MultipartFormMetadata(file=True))
    ]
    r"""Files to upload to the datasource"""

    prefix: Annotated[Optional[str], FieldMetadata(multipart=True)] = None
    r"""Path prefix for organizing uploaded files"""

    extract_zip: Annotated[Optional[bool], FieldMetadata(multipart=True)] = None
    r"""Auto-extract ZIP archives"""

    extract_eml: Annotated[Optional[bool], FieldMetadata(multipart=True)] = None
    r"""Extract EML email files"""

    max_concurrent: Annotated[Optional[int], FieldMetadata(multipart=True)] = None
    r"""Maximum concurrent file uploads"""


class UploadDatasourceContentRequestTypedDict(TypedDict):
    datasource_id: str
    request_body: NotRequired[UploadDatasourceContentRequestBodyTypedDict]


class UploadDatasourceContentRequest(BaseModel):
    datasource_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]

    request_body: Annotated[
        Optional[UploadDatasourceContentRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="multipart/form-data")),
    ] = None
