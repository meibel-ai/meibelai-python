"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from meibelai.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class InstanceMetadataTypedDict(TypedDict):
    pass


class InstanceMetadata(BaseModel):
    pass


class AddBlueprintInstanceRequestTypedDict(TypedDict):
    r"""AddBlueprintInstanceRequest"""

    blueprint_id: NotRequired[Nullable[str]]
    workflow_type: NotRequired[Nullable[str]]
    task_queue: NotRequired[Nullable[str]]
    instance_metadata: NotRequired[Nullable[InstanceMetadataTypedDict]]
    parent_id: NotRequired[Nullable[str]]


class AddBlueprintInstanceRequest(BaseModel):
    r"""AddBlueprintInstanceRequest"""

    blueprint_id: OptionalNullable[str] = UNSET

    workflow_type: OptionalNullable[str] = UNSET

    task_queue: OptionalNullable[str] = UNSET

    instance_metadata: OptionalNullable[InstanceMetadata] = UNSET

    parent_id: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "blueprint_id",
            "workflow_type",
            "task_queue",
            "instance_metadata",
            "parent_id",
        ]
        nullable_fields = [
            "blueprint_id",
            "workflow_type",
            "task_queue",
            "instance_metadata",
            "parent_id",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
