"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from meibelai.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import List
from typing_extensions import NotRequired, TypedDict


class AddTagColumnRequestTypedDict(TypedDict):
    r"""AddTagColumnRequest"""

    description: NotRequired[Nullable[str]]
    dtype: NotRequired[Nullable[str]]
    is_key: NotRequired[Nullable[bool]]
    is_indexed: NotRequired[Nullable[bool]]
    engineered_features: NotRequired[Nullable[List[str]]]


class AddTagColumnRequest(BaseModel):
    r"""AddTagColumnRequest"""

    description: OptionalNullable[str] = UNSET

    dtype: OptionalNullable[str] = UNSET

    is_key: OptionalNullable[bool] = UNSET

    is_indexed: OptionalNullable[bool] = UNSET

    engineered_features: OptionalNullable[List[str]] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "description",
            "dtype",
            "is_key",
            "is_indexed",
            "engineered_features",
        ]
        nullable_fields = [
            "description",
            "dtype",
            "is_key",
            "is_indexed",
            "engineered_features",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
