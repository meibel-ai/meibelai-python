"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .getalldatasourceidsrequest import (
    GetAllDatasourceIdsRequest,
    GetAllDatasourceIdsRequestTypedDict,
)
from meibelai.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from meibelai.utils import (
    FieldMetadata,
    HeaderMetadata,
    QueryParamMetadata,
    RequestMetadata,
)
import pydantic
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetAllDatasourceIdsRequest1TypedDict(TypedDict):
    get_all_datasource_ids_request: GetAllDatasourceIdsRequestTypedDict
    offset: NotRequired[int]
    r"""Number of items to skip"""
    limit: NotRequired[int]
    r"""Maximum number of items to return"""
    sort_by: NotRequired[Nullable[str]]
    r"""Field to sort by"""
    sort_order: NotRequired[Nullable[str]]
    r"""Sort order (asc or desc)"""
    customer_id_param: NotRequired[Nullable[str]]
    r"""Customer ID"""


class GetAllDatasourceIdsRequest1(BaseModel):
    get_all_datasource_ids_request: Annotated[
        GetAllDatasourceIdsRequest,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]

    offset: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 0
    r"""Number of items to skip"""

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 10
    r"""Maximum number of items to return"""

    sort_by: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Field to sort by"""

    sort_order: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Sort order (asc or desc)"""

    customer_id_param: Annotated[
        OptionalNullable[str],
        pydantic.Field(alias="customer-id"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = UNSET
    r"""Customer ID"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "offset",
            "limit",
            "sort_by",
            "sort_order",
            "customer-id_param",
        ]
        nullable_fields = ["sort_by", "sort_order", "customer-id_param"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
