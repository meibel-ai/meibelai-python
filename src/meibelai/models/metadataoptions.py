"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from meibelai.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class MetadataOptionsTypedDict(TypedDict):
    r"""MetadataOptions"""

    create_title: NotRequired[Nullable[bool]]
    extract_questions_answers: NotRequired[Nullable[bool]]
    extract_summary: NotRequired[Nullable[bool]]
    has_consumer_content: NotRequired[Nullable[bool]]
    get_bibliographical_information: NotRequired[Nullable[bool]]


class MetadataOptions(BaseModel):
    r"""MetadataOptions"""

    create_title: OptionalNullable[bool] = UNSET

    extract_questions_answers: OptionalNullable[bool] = UNSET

    extract_summary: OptionalNullable[bool] = UNSET

    has_consumer_content: OptionalNullable[bool] = UNSET

    get_bibliographical_information: OptionalNullable[bool] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "create_title",
            "extract_questions_answers",
            "extract_summary",
            "has_consumer_content",
            "get_bibliographical_information",
        ]
        nullable_fields = [
            "create_title",
            "extract_questions_answers",
            "extract_summary",
            "has_consumer_content",
            "get_bibliographical_information",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
