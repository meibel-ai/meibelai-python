"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .codechunking import CodeChunking, CodeChunkingTypedDict
from .htmlchunking import HTMLChunking, HTMLChunkingTypedDict
from .jsonnodechunking import JSONNodeChunking, JSONNodeChunkingTypedDict
from .markdownnodechunking import MarkdownNodeChunking, MarkdownNodeChunkingTypedDict
from .semanticchunking import SemanticChunking, SemanticChunkingTypedDict
from .sentencechunking import SentenceChunking, SentenceChunkingTypedDict
from .tokentextchunking import TokenTextChunking, TokenTextChunkingTypedDict
from meibelai.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class UpdateChunkingStrategyRequestTypedDict(TypedDict):
    r"""UpdateChunkingStrategyRequest"""

    code_splitter: NotRequired[Nullable[CodeChunkingTypedDict]]
    html_node_parser: NotRequired[Nullable[HTMLChunkingTypedDict]]
    json_node_parser: NotRequired[Nullable[JSONNodeChunkingTypedDict]]
    markdown_node_parser: NotRequired[Nullable[MarkdownNodeChunkingTypedDict]]
    semantic_splitter_node_parser: NotRequired[Nullable[SemanticChunkingTypedDict]]
    sentence_splitter: NotRequired[Nullable[SentenceChunkingTypedDict]]
    token_text_splitter: NotRequired[Nullable[TokenTextChunkingTypedDict]]


class UpdateChunkingStrategyRequest(BaseModel):
    r"""UpdateChunkingStrategyRequest"""

    code_splitter: OptionalNullable[CodeChunking] = UNSET

    html_node_parser: OptionalNullable[HTMLChunking] = UNSET

    json_node_parser: OptionalNullable[JSONNodeChunking] = UNSET

    markdown_node_parser: OptionalNullable[MarkdownNodeChunking] = UNSET

    semantic_splitter_node_parser: OptionalNullable[SemanticChunking] = UNSET

    sentence_splitter: OptionalNullable[SentenceChunking] = UNSET

    token_text_splitter: OptionalNullable[TokenTextChunking] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "code_splitter",
            "html_node_parser",
            "json_node_parser",
            "markdown_node_parser",
            "semantic_splitter_node_parser",
            "sentence_splitter",
            "token_text_splitter",
        ]
        nullable_fields = [
            "code_splitter",
            "html_node_parser",
            "json_node_parser",
            "markdown_node_parser",
            "semantic_splitter_node_parser",
            "sentence_splitter",
            "token_text_splitter",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
