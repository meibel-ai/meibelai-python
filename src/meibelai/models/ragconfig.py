"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .embeddingmodel import EmbeddingModel, EmbeddingModelTypedDict
from .extractormodel import ExtractorModel, ExtractorModelTypedDict
from .metadataoptions import MetadataOptions, MetadataOptionsTypedDict
from .sparseembeddingmodel import SparseEmbeddingModel, SparseEmbeddingModelTypedDict
from meibelai.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class RagConfigTypedDict(TypedDict):
    r"""RagConfig"""

    datasource_id: str
    description: str
    collection_id: str
    extractor_model: NotRequired[Nullable[ExtractorModelTypedDict]]
    embedding_model: NotRequired[Nullable[EmbeddingModelTypedDict]]
    sparse_embedding_model: NotRequired[Nullable[SparseEmbeddingModelTypedDict]]
    collect_metadata: NotRequired[Nullable[bool]]
    metadata_options: NotRequired[Nullable[MetadataOptionsTypedDict]]
    created_by: NotRequired[Nullable[str]]
    updated_by: NotRequired[Nullable[str]]


class RagConfig(BaseModel):
    r"""RagConfig"""

    datasource_id: str

    description: str

    collection_id: str

    extractor_model: OptionalNullable[ExtractorModel] = UNSET

    embedding_model: OptionalNullable[EmbeddingModel] = UNSET

    sparse_embedding_model: OptionalNullable[SparseEmbeddingModel] = UNSET

    collect_metadata: OptionalNullable[bool] = UNSET

    metadata_options: OptionalNullable[MetadataOptions] = UNSET

    created_by: OptionalNullable[str] = UNSET

    updated_by: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "extractor_model",
            "embedding_model",
            "sparse_embedding_model",
            "collect_metadata",
            "metadata_options",
            "created_by",
            "updated_by",
        ]
        nullable_fields = [
            "extractor_model",
            "embedding_model",
            "sparse_embedding_model",
            "collect_metadata",
            "metadata_options",
            "created_by",
            "updated_by",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
