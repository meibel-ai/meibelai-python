"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from meibelai.types import BaseModel
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class DataTypedDict(TypedDict):
    r"""Event data payload"""


class Data(BaseModel):
    r"""Event data payload"""


class SSEEventTypedDict(TypedDict):
    r"""Generic Server-Sent Event"""

    event: str
    r"""Event type (e.g., connected, progress, stream_complete, error, keepalive)"""
    data: NotRequired[DataTypedDict]
    r"""Event data payload"""


class SSEEvent(BaseModel):
    r"""Generic Server-Sent Event"""

    event: str
    r"""Event type (e.g., connected, progress, stream_complete, error, keepalive)"""

    data: Optional[Data] = None
    r"""Event data payload"""
