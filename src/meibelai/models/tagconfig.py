"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from meibelai.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class TagConfigTypedDict(TypedDict):
    r"""TagConfig"""

    datasource_id: str
    description: Nullable[str]
    logical_group_regex: Nullable[str]
    working_bucket: str
    db_path: Nullable[str]
    created_by: NotRequired[Nullable[str]]
    updated_by: NotRequired[Nullable[str]]


class TagConfig(BaseModel):
    r"""TagConfig"""

    datasource_id: str

    description: Nullable[str]

    logical_group_regex: Nullable[str]

    working_bucket: str

    db_path: Nullable[str]

    created_by: OptionalNullable[str] = UNSET

    updated_by: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["created_by", "updated_by"]
        nullable_fields = [
            "description",
            "logical_group_regex",
            "db_path",
            "created_by",
            "updated_by",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
