"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .activitystatus import ActivityStatus
from datetime import datetime
from meibelai.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class InputDataTypedDict(TypedDict):
    pass


class InputData(BaseModel):
    pass


class OutputDataTypedDict(TypedDict):
    pass


class OutputData(BaseModel):
    pass


class ActivityTypedDict(TypedDict):
    r"""Activity"""

    blueprint_instance_id: str
    activity_type: str
    id: NotRequired[Nullable[str]]
    status: NotRequired[Nullable[ActivityStatus]]
    start_time: NotRequired[Nullable[datetime]]
    end_time: NotRequired[Nullable[datetime]]
    input_data: NotRequired[Nullable[InputDataTypedDict]]
    output_data: NotRequired[Nullable[OutputDataTypedDict]]
    error: NotRequired[Nullable[str]]
    group_id: NotRequired[Nullable[str]]


class Activity(BaseModel):
    r"""Activity"""

    blueprint_instance_id: str

    activity_type: str

    id: OptionalNullable[str] = UNSET

    status: OptionalNullable[ActivityStatus] = UNSET

    start_time: OptionalNullable[datetime] = UNSET

    end_time: OptionalNullable[datetime] = UNSET

    input_data: OptionalNullable[InputData] = UNSET

    output_data: OptionalNullable[OutputData] = UNSET

    error: OptionalNullable[str] = UNSET

    group_id: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "id",
            "status",
            "start_time",
            "end_time",
            "input_data",
            "output_data",
            "error",
            "group_id",
        ]
        nullable_fields = [
            "id",
            "status",
            "start_time",
            "end_time",
            "input_data",
            "output_data",
            "error",
            "group_id",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
