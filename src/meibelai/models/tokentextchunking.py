"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from meibelai.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import List
from typing_extensions import NotRequired, TypedDict


class TokenTextChunkingTypedDict(TypedDict):
    r"""TokenTextChunking"""

    chunk_size: NotRequired[Nullable[int]]
    chunk_overlap: NotRequired[Nullable[int]]
    separator: NotRequired[Nullable[str]]
    backup_separators: NotRequired[Nullable[List[str]]]
    keep_whitespaces: NotRequired[Nullable[bool]]


class TokenTextChunking(BaseModel):
    r"""TokenTextChunking"""

    chunk_size: OptionalNullable[int] = UNSET

    chunk_overlap: OptionalNullable[int] = UNSET

    separator: OptionalNullable[str] = UNSET

    backup_separators: OptionalNullable[List[str]] = UNSET

    keep_whitespaces: OptionalNullable[bool] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "chunk_size",
            "chunk_overlap",
            "separator",
            "backup_separators",
            "keep_whitespaces",
        ]
        nullable_fields = [
            "chunk_size",
            "chunk_overlap",
            "separator",
            "backup_separators",
            "keep_whitespaces",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
