"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from typing import TYPE_CHECKING
from importlib import import_module

if TYPE_CHECKING:
    from .apierror import APIError
    from .chatevent import ChatEvent, ChatEventTypedDict, Data, DataTypedDict
    from .createdataelementop import (
        CreateDataelementRequest,
        CreateDataelementRequestTypedDict,
    )
    from .createstreamcompletionop import (
        CreateStreamCompletionResponseBody,
        CreateStreamCompletionResponseBodyTypedDict,
    )
    from .dataelementresponse import DataElementResponse, DataElementResponseTypedDict
    from .dataelementtype import DataElementType
    from .datasourceresponse import DatasourceResponse, DatasourceResponseTypedDict
    from .datasourcetype import DatasourceType
    from .deletedataelementop import (
        DeleteDataelementRequest,
        DeleteDataelementRequestTypedDict,
    )
    from .getdataelementop import GetDataelementRequest, GetDataelementRequestTypedDict
    from .getop import GetRequest, GetRequestTypedDict
    from .heartbeatevent import HeartbeatEvent, HeartbeatEventTypedDict
    from .httpvalidationerror import HTTPValidationError, HTTPValidationErrorData
    from .listdataelementsop import (
        ListDataelementsRequest,
        ListDataelementsRequestTypedDict,
    )
    from .listop import ListRequest, ListRequestTypedDict
    from .metadata import Metadata, MetadataTypedDict
    from .newdatasourcerequest import (
        NewDatasourceRequest,
        NewDatasourceRequestTypedDict,
    )
    from .newdatasourceresponse import (
        NewDatasourceResponse,
        NewDatasourceResponseTypedDict,
    )
    from .run_chat_streamop import (
        RunChatStreamRequest,
        RunChatStreamRequestTypedDict,
        RunChatStreamResponseBody,
        RunChatStreamResponseBodyTypedDict,
    )
    from .run_chatop import RunChatRequest, RunChatRequestTypedDict
    from .security import Security, SecurityTypedDict
    from .updatedataelementop import (
        UpdateDataelementRequest,
        UpdateDataelementRequestTypedDict,
    )
    from .updatedatasourcerequest import (
        UpdateDatasourceRequest,
        UpdateDatasourceRequestTypedDict,
    )
    from .updateop import UpdateRequest, UpdateRequestTypedDict
    from .uploaddataelementop import (
        UploadDataelementRequest,
        UploadDataelementRequestTypedDict,
    )
    from .validationerror import (
        Loc,
        LocTypedDict,
        ValidationError,
        ValidationErrorTypedDict,
    )

__all__ = [
    "APIError",
    "ChatEvent",
    "ChatEventTypedDict",
    "CreateDataelementRequest",
    "CreateDataelementRequestTypedDict",
    "CreateStreamCompletionResponseBody",
    "CreateStreamCompletionResponseBodyTypedDict",
    "Data",
    "DataElementResponse",
    "DataElementResponseTypedDict",
    "DataElementType",
    "DataTypedDict",
    "DatasourceResponse",
    "DatasourceResponseTypedDict",
    "DatasourceType",
    "DeleteDataelementRequest",
    "DeleteDataelementRequestTypedDict",
    "GetDataelementRequest",
    "GetDataelementRequestTypedDict",
    "GetRequest",
    "GetRequestTypedDict",
    "HTTPValidationError",
    "HTTPValidationErrorData",
    "HeartbeatEvent",
    "HeartbeatEventTypedDict",
    "ListDataelementsRequest",
    "ListDataelementsRequestTypedDict",
    "ListRequest",
    "ListRequestTypedDict",
    "Loc",
    "LocTypedDict",
    "Metadata",
    "MetadataTypedDict",
    "NewDatasourceRequest",
    "NewDatasourceRequestTypedDict",
    "NewDatasourceResponse",
    "NewDatasourceResponseTypedDict",
    "RunChatRequest",
    "RunChatRequestTypedDict",
    "RunChatStreamRequest",
    "RunChatStreamRequestTypedDict",
    "RunChatStreamResponseBody",
    "RunChatStreamResponseBodyTypedDict",
    "Security",
    "SecurityTypedDict",
    "UpdateDataelementRequest",
    "UpdateDataelementRequestTypedDict",
    "UpdateDatasourceRequest",
    "UpdateDatasourceRequestTypedDict",
    "UpdateRequest",
    "UpdateRequestTypedDict",
    "UploadDataelementRequest",
    "UploadDataelementRequestTypedDict",
    "ValidationError",
    "ValidationErrorTypedDict",
]

_dynamic_imports: dict[str, str] = {
    "APIError": ".apierror",
    "ChatEvent": ".chatevent",
    "ChatEventTypedDict": ".chatevent",
    "Data": ".chatevent",
    "DataTypedDict": ".chatevent",
    "CreateDataelementRequest": ".createdataelementop",
    "CreateDataelementRequestTypedDict": ".createdataelementop",
    "CreateStreamCompletionResponseBody": ".createstreamcompletionop",
    "CreateStreamCompletionResponseBodyTypedDict": ".createstreamcompletionop",
    "DataElementResponse": ".dataelementresponse",
    "DataElementResponseTypedDict": ".dataelementresponse",
    "DataElementType": ".dataelementtype",
    "DatasourceResponse": ".datasourceresponse",
    "DatasourceResponseTypedDict": ".datasourceresponse",
    "DatasourceType": ".datasourcetype",
    "DeleteDataelementRequest": ".deletedataelementop",
    "DeleteDataelementRequestTypedDict": ".deletedataelementop",
    "GetDataelementRequest": ".getdataelementop",
    "GetDataelementRequestTypedDict": ".getdataelementop",
    "GetRequest": ".getop",
    "GetRequestTypedDict": ".getop",
    "HeartbeatEvent": ".heartbeatevent",
    "HeartbeatEventTypedDict": ".heartbeatevent",
    "HTTPValidationError": ".httpvalidationerror",
    "HTTPValidationErrorData": ".httpvalidationerror",
    "ListDataelementsRequest": ".listdataelementsop",
    "ListDataelementsRequestTypedDict": ".listdataelementsop",
    "ListRequest": ".listop",
    "ListRequestTypedDict": ".listop",
    "Metadata": ".metadata",
    "MetadataTypedDict": ".metadata",
    "NewDatasourceRequest": ".newdatasourcerequest",
    "NewDatasourceRequestTypedDict": ".newdatasourcerequest",
    "NewDatasourceResponse": ".newdatasourceresponse",
    "NewDatasourceResponseTypedDict": ".newdatasourceresponse",
    "RunChatStreamRequest": ".run_chat_streamop",
    "RunChatStreamRequestTypedDict": ".run_chat_streamop",
    "RunChatStreamResponseBody": ".run_chat_streamop",
    "RunChatStreamResponseBodyTypedDict": ".run_chat_streamop",
    "RunChatRequest": ".run_chatop",
    "RunChatRequestTypedDict": ".run_chatop",
    "Security": ".security",
    "SecurityTypedDict": ".security",
    "UpdateDataelementRequest": ".updatedataelementop",
    "UpdateDataelementRequestTypedDict": ".updatedataelementop",
    "UpdateDatasourceRequest": ".updatedatasourcerequest",
    "UpdateDatasourceRequestTypedDict": ".updatedatasourcerequest",
    "UpdateRequest": ".updateop",
    "UpdateRequestTypedDict": ".updateop",
    "UploadDataelementRequest": ".uploaddataelementop",
    "UploadDataelementRequestTypedDict": ".uploaddataelementop",
    "Loc": ".validationerror",
    "LocTypedDict": ".validationerror",
    "ValidationError": ".validationerror",
    "ValidationErrorTypedDict": ".validationerror",
}


def __getattr__(attr_name: str) -> object:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(
            f"No {attr_name} found in _dynamic_imports for module name -> {__name__} "
        )

    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(
            f"Failed to import {attr_name} from {module_name}: {e}"
        ) from e
    except AttributeError as e:
        raise AttributeError(
            f"Failed to get {attr_name} from {module_name}: {e}"
        ) from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)
