"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .ssecompleteevent import SSECompleteEvent, SSECompleteEventTypedDict
from .sseconnectionevent import SSEConnectionEvent, SSEConnectionEventTypedDict
from .sseerrorevent import SSEErrorEvent, SSEErrorEventTypedDict
from .ssekeepaliveevent import SSEKeepaliveEvent, SSEKeepaliveEventTypedDict
from .sseprogressevent import SSEProgressEvent, SSEProgressEventTypedDict
from meibelai.types import BaseModel
from meibelai.utils import FieldMetadata, PathParamMetadata, get_discriminator
from pydantic import Discriminator, Tag
from typing import Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


class GetUploadProgressStreamUploadsUploadIDProgressGetRequestTypedDict(TypedDict):
    upload_id: str


class GetUploadProgressStreamUploadsUploadIDProgressGetRequest(BaseModel):
    upload_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]


GetUploadProgressStreamUploadsUploadIDProgressGetResponseBodyTypedDict = TypeAliasType(
    "GetUploadProgressStreamUploadsUploadIDProgressGetResponseBodyTypedDict",
    Union[
        SSEConnectionEventTypedDict,
        SSEProgressEventTypedDict,
        SSECompleteEventTypedDict,
        SSEErrorEventTypedDict,
        SSEKeepaliveEventTypedDict,
    ],
)
r"""Server-Sent Events stream for upload progress"""


GetUploadProgressStreamUploadsUploadIDProgressGetResponseBody = Annotated[
    Union[
        Annotated[SSEConnectionEvent, Tag("connected")],
        Annotated[SSEProgressEvent, Tag("progress")],
        Annotated[SSECompleteEvent, Tag("stream_complete")],
        Annotated[SSEErrorEvent, Tag("error")],
        Annotated[SSEKeepaliveEvent, Tag("keepalive")],
    ],
    Discriminator(lambda m: get_discriminator(m, "event", "event")),
]
r"""Server-Sent Events stream for upload progress"""
