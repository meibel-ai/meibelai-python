"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .eventtype import EventType
from datetime import datetime
from meibelai.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import Any, Dict
from typing_extensions import NotRequired, TypedDict


class EventTypedDict(TypedDict):
    r"""Event"""

    blueprint_instance_id: str
    id: NotRequired[Nullable[str]]
    activity_id: NotRequired[Nullable[str]]
    event_type: NotRequired[Nullable[EventType]]
    timestamp: NotRequired[Nullable[datetime]]
    details: NotRequired[Nullable[Dict[str, Any]]]
    group_id: NotRequired[Nullable[str]]
    is_signal: NotRequired[Nullable[bool]]
    is_internal: NotRequired[Nullable[bool]]
    originating_signal_id: NotRequired[Nullable[str]]


class Event(BaseModel):
    r"""Event"""

    blueprint_instance_id: str

    id: OptionalNullable[str] = UNSET

    activity_id: OptionalNullable[str] = UNSET

    event_type: OptionalNullable[EventType] = UNSET

    timestamp: OptionalNullable[datetime] = UNSET

    details: OptionalNullable[Dict[str, Any]] = UNSET

    group_id: OptionalNullable[str] = UNSET

    is_signal: OptionalNullable[bool] = UNSET

    is_internal: OptionalNullable[bool] = UNSET

    originating_signal_id: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "id",
            "activity_id",
            "event_type",
            "timestamp",
            "details",
            "group_id",
            "is_signal",
            "is_internal",
            "originating_signal_id",
        ]
        nullable_fields = [
            "id",
            "activity_id",
            "event_type",
            "timestamp",
            "details",
            "group_id",
            "is_signal",
            "is_internal",
            "originating_signal_id",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
