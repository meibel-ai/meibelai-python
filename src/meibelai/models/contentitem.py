"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .contenttype import ContentType
from meibelai.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class ContentItemTypedDict(TypedDict):
    r"""ContentItem"""

    name: str
    path: str
    type: ContentType
    r"""ContentType"""
    size: NotRequired[Nullable[int]]
    media_type: NotRequired[Nullable[str]]
    last_modified: NotRequired[Nullable[str]]
    etag: NotRequired[Nullable[str]]


class ContentItem(BaseModel):
    r"""ContentItem"""

    name: str

    path: str

    type: ContentType
    r"""ContentType"""

    size: OptionalNullable[int] = UNSET

    media_type: OptionalNullable[str] = UNSET

    last_modified: OptionalNullable[str] = UNSET

    etag: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["size", "media_type", "last_modified", "etag"]
        nullable_fields = ["size", "media_type", "last_modified", "etag"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
