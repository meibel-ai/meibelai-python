"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from meibelai import models, utils
from meibelai._hooks import HookContext
from meibelai.types import OptionalNullable, UNSET
from meibelai.utils import get_security_from_env
from meibelai.utils.unmarshal_json_response import unmarshal_json_response
from typing import Any, Mapping, Optional, Union


class Rag(BaseSDK):
    def add_rag_config(
        self,
        *,
        datasource_id: str,
        customer_id: str,
        collection_id: str,
        description: OptionalNullable[str] = UNSET,
        extractor_model: OptionalNullable[
            Union[models.ExtractorModel, models.ExtractorModelTypedDict]
        ] = UNSET,
        embedding_model: OptionalNullable[
            Union[models.EmbeddingModel, models.EmbeddingModelTypedDict]
        ] = UNSET,
        sparse_embedding_model: OptionalNullable[
            Union[models.SparseEmbeddingModel, models.SparseEmbeddingModelTypedDict]
        ] = UNSET,
        collect_metadata: OptionalNullable[bool] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.AddRagConfigResponse:
        r"""Add Rag Config

        :param datasource_id:
        :param customer_id: Customer ID
        :param collection_id:
        :param description:
        :param extractor_model:
        :param embedding_model:
        :param sparse_embedding_model:
        :param collect_metadata:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.AddRagConfigRequest1(
            datasource_id=datasource_id,
            customer_id=customer_id,
            add_rag_config_request=models.AddRagConfigRequest(
                description=description,
                collection_id=collection_id,
                extractor_model=utils.get_pydantic_model(
                    extractor_model, OptionalNullable[models.ExtractorModel]
                ),
                embedding_model=utils.get_pydantic_model(
                    embedding_model, OptionalNullable[models.EmbeddingModel]
                ),
                sparse_embedding_model=utils.get_pydantic_model(
                    sparse_embedding_model,
                    OptionalNullable[models.SparseEmbeddingModel],
                ),
                collect_metadata=collect_metadata,
            ),
        )

        req = self._build_request(
            method="POST",
            path="/datasource/{datasource_id}/rag_config",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.add_rag_config_request,
                False,
                False,
                "json",
                models.AddRagConfigRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 60000, 1.5, 3600000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["5XX"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="add_rag_config",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.AddRagConfigResponse, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                models.HTTPValidationErrorData, http_res
            )
            raise models.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)

        raise models.APIError("Unexpected response received", http_res)

    async def add_rag_config_async(
        self,
        *,
        datasource_id: str,
        customer_id: str,
        collection_id: str,
        description: OptionalNullable[str] = UNSET,
        extractor_model: OptionalNullable[
            Union[models.ExtractorModel, models.ExtractorModelTypedDict]
        ] = UNSET,
        embedding_model: OptionalNullable[
            Union[models.EmbeddingModel, models.EmbeddingModelTypedDict]
        ] = UNSET,
        sparse_embedding_model: OptionalNullable[
            Union[models.SparseEmbeddingModel, models.SparseEmbeddingModelTypedDict]
        ] = UNSET,
        collect_metadata: OptionalNullable[bool] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.AddRagConfigResponse:
        r"""Add Rag Config

        :param datasource_id:
        :param customer_id: Customer ID
        :param collection_id:
        :param description:
        :param extractor_model:
        :param embedding_model:
        :param sparse_embedding_model:
        :param collect_metadata:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.AddRagConfigRequest1(
            datasource_id=datasource_id,
            customer_id=customer_id,
            add_rag_config_request=models.AddRagConfigRequest(
                description=description,
                collection_id=collection_id,
                extractor_model=utils.get_pydantic_model(
                    extractor_model, OptionalNullable[models.ExtractorModel]
                ),
                embedding_model=utils.get_pydantic_model(
                    embedding_model, OptionalNullable[models.EmbeddingModel]
                ),
                sparse_embedding_model=utils.get_pydantic_model(
                    sparse_embedding_model,
                    OptionalNullable[models.SparseEmbeddingModel],
                ),
                collect_metadata=collect_metadata,
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/datasource/{datasource_id}/rag_config",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.add_rag_config_request,
                False,
                False,
                "json",
                models.AddRagConfigRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 60000, 1.5, 3600000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["5XX"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="add_rag_config",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.AddRagConfigResponse, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                models.HTTPValidationErrorData, http_res
            )
            raise models.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)

        raise models.APIError("Unexpected response received", http_res)

    def get_rag_config(
        self,
        *,
        datasource_id: str,
        customer_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.RagConfig:
        r"""Get Rag Config

        :param datasource_id:
        :param customer_id: Customer ID
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetRagConfigRequest(
            datasource_id=datasource_id,
            customer_id=customer_id,
        )

        req = self._build_request(
            method="GET",
            path="/datasource/{datasource_id}/rag_config",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 60000, 1.5, 3600000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["5XX"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_rag_config",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.RagConfig, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                models.HTTPValidationErrorData, http_res
            )
            raise models.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)

        raise models.APIError("Unexpected response received", http_res)

    async def get_rag_config_async(
        self,
        *,
        datasource_id: str,
        customer_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.RagConfig:
        r"""Get Rag Config

        :param datasource_id:
        :param customer_id: Customer ID
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetRagConfigRequest(
            datasource_id=datasource_id,
            customer_id=customer_id,
        )

        req = self._build_request_async(
            method="GET",
            path="/datasource/{datasource_id}/rag_config",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 60000, 1.5, 3600000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["5XX"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_rag_config",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.RagConfig, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                models.HTTPValidationErrorData, http_res
            )
            raise models.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)

        raise models.APIError("Unexpected response received", http_res)

    def update_rag_config(
        self,
        *,
        datasource_id: str,
        customer_id: str,
        description: OptionalNullable[str] = UNSET,
        collection_id: OptionalNullable[str] = UNSET,
        extractor_model: OptionalNullable[
            Union[models.ExtractorModel, models.ExtractorModelTypedDict]
        ] = UNSET,
        embedding_model: OptionalNullable[
            Union[models.EmbeddingModel, models.EmbeddingModelTypedDict]
        ] = UNSET,
        sparse_embedding_model: OptionalNullable[
            Union[models.SparseEmbeddingModel, models.SparseEmbeddingModelTypedDict]
        ] = UNSET,
        collect_metadata: OptionalNullable[bool] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.UpdateRagConfigResponse:
        r"""Update Rag Config

        :param datasource_id:
        :param customer_id: Customer ID
        :param description:
        :param collection_id:
        :param extractor_model:
        :param embedding_model:
        :param sparse_embedding_model:
        :param collect_metadata:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.UpdateRagConfigRequest1(
            datasource_id=datasource_id,
            customer_id=customer_id,
            update_rag_config_request=models.UpdateRagConfigRequest(
                description=description,
                collection_id=collection_id,
                extractor_model=utils.get_pydantic_model(
                    extractor_model, OptionalNullable[models.ExtractorModel]
                ),
                embedding_model=utils.get_pydantic_model(
                    embedding_model, OptionalNullable[models.EmbeddingModel]
                ),
                sparse_embedding_model=utils.get_pydantic_model(
                    sparse_embedding_model,
                    OptionalNullable[models.SparseEmbeddingModel],
                ),
                collect_metadata=collect_metadata,
            ),
        )

        req = self._build_request(
            method="PUT",
            path="/datasource/{datasource_id}/rag_config",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.update_rag_config_request,
                False,
                False,
                "json",
                models.UpdateRagConfigRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 60000, 1.5, 3600000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["5XX"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="update_rag_config",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.UpdateRagConfigResponse, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                models.HTTPValidationErrorData, http_res
            )
            raise models.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)

        raise models.APIError("Unexpected response received", http_res)

    async def update_rag_config_async(
        self,
        *,
        datasource_id: str,
        customer_id: str,
        description: OptionalNullable[str] = UNSET,
        collection_id: OptionalNullable[str] = UNSET,
        extractor_model: OptionalNullable[
            Union[models.ExtractorModel, models.ExtractorModelTypedDict]
        ] = UNSET,
        embedding_model: OptionalNullable[
            Union[models.EmbeddingModel, models.EmbeddingModelTypedDict]
        ] = UNSET,
        sparse_embedding_model: OptionalNullable[
            Union[models.SparseEmbeddingModel, models.SparseEmbeddingModelTypedDict]
        ] = UNSET,
        collect_metadata: OptionalNullable[bool] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.UpdateRagConfigResponse:
        r"""Update Rag Config

        :param datasource_id:
        :param customer_id: Customer ID
        :param description:
        :param collection_id:
        :param extractor_model:
        :param embedding_model:
        :param sparse_embedding_model:
        :param collect_metadata:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.UpdateRagConfigRequest1(
            datasource_id=datasource_id,
            customer_id=customer_id,
            update_rag_config_request=models.UpdateRagConfigRequest(
                description=description,
                collection_id=collection_id,
                extractor_model=utils.get_pydantic_model(
                    extractor_model, OptionalNullable[models.ExtractorModel]
                ),
                embedding_model=utils.get_pydantic_model(
                    embedding_model, OptionalNullable[models.EmbeddingModel]
                ),
                sparse_embedding_model=utils.get_pydantic_model(
                    sparse_embedding_model,
                    OptionalNullable[models.SparseEmbeddingModel],
                ),
                collect_metadata=collect_metadata,
            ),
        )

        req = self._build_request_async(
            method="PUT",
            path="/datasource/{datasource_id}/rag_config",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.update_rag_config_request,
                False,
                False,
                "json",
                models.UpdateRagConfigRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 60000, 1.5, 3600000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["5XX"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="update_rag_config",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.UpdateRagConfigResponse, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                models.HTTPValidationErrorData, http_res
            )
            raise models.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)

        raise models.APIError("Unexpected response received", http_res)

    def delete_rag_config(
        self,
        *,
        datasource_id: str,
        customer_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> str:
        r"""Delete Rag Config

        :param datasource_id:
        :param customer_id: Customer ID
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.DeleteRagConfigRequest(
            datasource_id=datasource_id,
            customer_id=customer_id,
        )

        req = self._build_request(
            method="DELETE",
            path="/datasource/{datasource_id}/rag_config",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 60000, 1.5, 3600000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["5XX"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="delete_rag_config",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(str, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                models.HTTPValidationErrorData, http_res
            )
            raise models.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)

        raise models.APIError("Unexpected response received", http_res)

    async def delete_rag_config_async(
        self,
        *,
        datasource_id: str,
        customer_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> str:
        r"""Delete Rag Config

        :param datasource_id:
        :param customer_id: Customer ID
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.DeleteRagConfigRequest(
            datasource_id=datasource_id,
            customer_id=customer_id,
        )

        req = self._build_request_async(
            method="DELETE",
            path="/datasource/{datasource_id}/rag_config",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 60000, 1.5, 3600000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["5XX"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="delete_rag_config",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(str, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                models.HTTPValidationErrorData, http_res
            )
            raise models.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)

        raise models.APIError("Unexpected response received", http_res)

    def add_chunking_strategy(
        self,
        *,
        datasource_id: str,
        customer_id: str,
        code_splitter: OptionalNullable[
            Union[models.CodeChunking, models.CodeChunkingTypedDict]
        ] = UNSET,
        html_node_parser: OptionalNullable[
            Union[models.HTMLChunking, models.HTMLChunkingTypedDict]
        ] = UNSET,
        json_node_parser: OptionalNullable[
            Union[models.JSONNodeChunking, models.JSONNodeChunkingTypedDict]
        ] = UNSET,
        markdown_node_parser: OptionalNullable[
            Union[models.MarkdownNodeChunking, models.MarkdownNodeChunkingTypedDict]
        ] = UNSET,
        semantic_splitter_node_parser: OptionalNullable[
            Union[models.SemanticChunking, models.SemanticChunkingTypedDict]
        ] = UNSET,
        sentence_splitter: OptionalNullable[
            Union[models.SentenceChunking, models.SentenceChunkingTypedDict]
        ] = UNSET,
        token_text_splitter: OptionalNullable[
            Union[models.TokenTextChunking, models.TokenTextChunkingTypedDict]
        ] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.AddChunkingStrategyResponse:
        r"""Add Chunking Strategy

        :param datasource_id:
        :param customer_id: Customer ID
        :param code_splitter:
        :param html_node_parser:
        :param json_node_parser:
        :param markdown_node_parser:
        :param semantic_splitter_node_parser:
        :param sentence_splitter:
        :param token_text_splitter:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.AddChunkingStrategyRequest1(
            datasource_id=datasource_id,
            customer_id=customer_id,
            add_chunking_strategy_request=models.AddChunkingStrategyRequest(
                code_splitter=utils.get_pydantic_model(
                    code_splitter, OptionalNullable[models.CodeChunking]
                ),
                html_node_parser=utils.get_pydantic_model(
                    html_node_parser, OptionalNullable[models.HTMLChunking]
                ),
                json_node_parser=utils.get_pydantic_model(
                    json_node_parser, OptionalNullable[models.JSONNodeChunking]
                ),
                markdown_node_parser=utils.get_pydantic_model(
                    markdown_node_parser, OptionalNullable[models.MarkdownNodeChunking]
                ),
                semantic_splitter_node_parser=utils.get_pydantic_model(
                    semantic_splitter_node_parser,
                    OptionalNullable[models.SemanticChunking],
                ),
                sentence_splitter=utils.get_pydantic_model(
                    sentence_splitter, OptionalNullable[models.SentenceChunking]
                ),
                token_text_splitter=utils.get_pydantic_model(
                    token_text_splitter, OptionalNullable[models.TokenTextChunking]
                ),
            ),
        )

        req = self._build_request(
            method="POST",
            path="/datasource/{datasource_id}/chunking_strategy",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.add_chunking_strategy_request,
                False,
                False,
                "json",
                models.AddChunkingStrategyRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 60000, 1.5, 3600000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["5XX"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="add_chunking_strategy",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.AddChunkingStrategyResponse, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                models.HTTPValidationErrorData, http_res
            )
            raise models.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)

        raise models.APIError("Unexpected response received", http_res)

    async def add_chunking_strategy_async(
        self,
        *,
        datasource_id: str,
        customer_id: str,
        code_splitter: OptionalNullable[
            Union[models.CodeChunking, models.CodeChunkingTypedDict]
        ] = UNSET,
        html_node_parser: OptionalNullable[
            Union[models.HTMLChunking, models.HTMLChunkingTypedDict]
        ] = UNSET,
        json_node_parser: OptionalNullable[
            Union[models.JSONNodeChunking, models.JSONNodeChunkingTypedDict]
        ] = UNSET,
        markdown_node_parser: OptionalNullable[
            Union[models.MarkdownNodeChunking, models.MarkdownNodeChunkingTypedDict]
        ] = UNSET,
        semantic_splitter_node_parser: OptionalNullable[
            Union[models.SemanticChunking, models.SemanticChunkingTypedDict]
        ] = UNSET,
        sentence_splitter: OptionalNullable[
            Union[models.SentenceChunking, models.SentenceChunkingTypedDict]
        ] = UNSET,
        token_text_splitter: OptionalNullable[
            Union[models.TokenTextChunking, models.TokenTextChunkingTypedDict]
        ] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.AddChunkingStrategyResponse:
        r"""Add Chunking Strategy

        :param datasource_id:
        :param customer_id: Customer ID
        :param code_splitter:
        :param html_node_parser:
        :param json_node_parser:
        :param markdown_node_parser:
        :param semantic_splitter_node_parser:
        :param sentence_splitter:
        :param token_text_splitter:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.AddChunkingStrategyRequest1(
            datasource_id=datasource_id,
            customer_id=customer_id,
            add_chunking_strategy_request=models.AddChunkingStrategyRequest(
                code_splitter=utils.get_pydantic_model(
                    code_splitter, OptionalNullable[models.CodeChunking]
                ),
                html_node_parser=utils.get_pydantic_model(
                    html_node_parser, OptionalNullable[models.HTMLChunking]
                ),
                json_node_parser=utils.get_pydantic_model(
                    json_node_parser, OptionalNullable[models.JSONNodeChunking]
                ),
                markdown_node_parser=utils.get_pydantic_model(
                    markdown_node_parser, OptionalNullable[models.MarkdownNodeChunking]
                ),
                semantic_splitter_node_parser=utils.get_pydantic_model(
                    semantic_splitter_node_parser,
                    OptionalNullable[models.SemanticChunking],
                ),
                sentence_splitter=utils.get_pydantic_model(
                    sentence_splitter, OptionalNullable[models.SentenceChunking]
                ),
                token_text_splitter=utils.get_pydantic_model(
                    token_text_splitter, OptionalNullable[models.TokenTextChunking]
                ),
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/datasource/{datasource_id}/chunking_strategy",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.add_chunking_strategy_request,
                False,
                False,
                "json",
                models.AddChunkingStrategyRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 60000, 1.5, 3600000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["5XX"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="add_chunking_strategy",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.AddChunkingStrategyResponse, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                models.HTTPValidationErrorData, http_res
            )
            raise models.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)

        raise models.APIError("Unexpected response received", http_res)

    def get_chunking_strategy(
        self,
        *,
        datasource_id: str,
        customer_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.RagChunkingStrategy:
        r"""Get Chunking Strategy

        :param datasource_id:
        :param customer_id: Customer ID
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetChunkingStrategyRequest(
            datasource_id=datasource_id,
            customer_id=customer_id,
        )

        req = self._build_request(
            method="GET",
            path="/datasource/{datasource_id}/chunking_strategy",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 60000, 1.5, 3600000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["5XX"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_chunking_strategy",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.RagChunkingStrategy, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                models.HTTPValidationErrorData, http_res
            )
            raise models.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)

        raise models.APIError("Unexpected response received", http_res)

    async def get_chunking_strategy_async(
        self,
        *,
        datasource_id: str,
        customer_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.RagChunkingStrategy:
        r"""Get Chunking Strategy

        :param datasource_id:
        :param customer_id: Customer ID
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetChunkingStrategyRequest(
            datasource_id=datasource_id,
            customer_id=customer_id,
        )

        req = self._build_request_async(
            method="GET",
            path="/datasource/{datasource_id}/chunking_strategy",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 60000, 1.5, 3600000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["5XX"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_chunking_strategy",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.RagChunkingStrategy, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                models.HTTPValidationErrorData, http_res
            )
            raise models.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)

        raise models.APIError("Unexpected response received", http_res)

    def update_chunking_strategy(
        self,
        *,
        datasource_id: str,
        customer_id: str,
        code_splitter: OptionalNullable[
            Union[models.CodeChunking, models.CodeChunkingTypedDict]
        ] = UNSET,
        html_node_parser: OptionalNullable[
            Union[models.HTMLChunking, models.HTMLChunkingTypedDict]
        ] = UNSET,
        json_node_parser: OptionalNullable[
            Union[models.JSONNodeChunking, models.JSONNodeChunkingTypedDict]
        ] = UNSET,
        markdown_node_parser: OptionalNullable[
            Union[models.MarkdownNodeChunking, models.MarkdownNodeChunkingTypedDict]
        ] = UNSET,
        semantic_splitter_node_parser: OptionalNullable[
            Union[models.SemanticChunking, models.SemanticChunkingTypedDict]
        ] = UNSET,
        sentence_splitter: OptionalNullable[
            Union[models.SentenceChunking, models.SentenceChunkingTypedDict]
        ] = UNSET,
        token_text_splitter: OptionalNullable[
            Union[models.TokenTextChunking, models.TokenTextChunkingTypedDict]
        ] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.UpdateChunkingStrategyResponse:
        r"""Update Chunking Strategy

        :param datasource_id:
        :param customer_id: Customer ID
        :param code_splitter:
        :param html_node_parser:
        :param json_node_parser:
        :param markdown_node_parser:
        :param semantic_splitter_node_parser:
        :param sentence_splitter:
        :param token_text_splitter:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.UpdateChunkingStrategyRequest1(
            datasource_id=datasource_id,
            customer_id=customer_id,
            update_chunking_strategy_request=models.UpdateChunkingStrategyRequest(
                code_splitter=utils.get_pydantic_model(
                    code_splitter, OptionalNullable[models.CodeChunking]
                ),
                html_node_parser=utils.get_pydantic_model(
                    html_node_parser, OptionalNullable[models.HTMLChunking]
                ),
                json_node_parser=utils.get_pydantic_model(
                    json_node_parser, OptionalNullable[models.JSONNodeChunking]
                ),
                markdown_node_parser=utils.get_pydantic_model(
                    markdown_node_parser, OptionalNullable[models.MarkdownNodeChunking]
                ),
                semantic_splitter_node_parser=utils.get_pydantic_model(
                    semantic_splitter_node_parser,
                    OptionalNullable[models.SemanticChunking],
                ),
                sentence_splitter=utils.get_pydantic_model(
                    sentence_splitter, OptionalNullable[models.SentenceChunking]
                ),
                token_text_splitter=utils.get_pydantic_model(
                    token_text_splitter, OptionalNullable[models.TokenTextChunking]
                ),
            ),
        )

        req = self._build_request(
            method="PUT",
            path="/datasource/{datasource_id}/chunking_strategy",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.update_chunking_strategy_request,
                False,
                False,
                "json",
                models.UpdateChunkingStrategyRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 60000, 1.5, 3600000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["5XX"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="update_chunking_strategy",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.UpdateChunkingStrategyResponse, http_res
            )
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                models.HTTPValidationErrorData, http_res
            )
            raise models.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)

        raise models.APIError("Unexpected response received", http_res)

    async def update_chunking_strategy_async(
        self,
        *,
        datasource_id: str,
        customer_id: str,
        code_splitter: OptionalNullable[
            Union[models.CodeChunking, models.CodeChunkingTypedDict]
        ] = UNSET,
        html_node_parser: OptionalNullable[
            Union[models.HTMLChunking, models.HTMLChunkingTypedDict]
        ] = UNSET,
        json_node_parser: OptionalNullable[
            Union[models.JSONNodeChunking, models.JSONNodeChunkingTypedDict]
        ] = UNSET,
        markdown_node_parser: OptionalNullable[
            Union[models.MarkdownNodeChunking, models.MarkdownNodeChunkingTypedDict]
        ] = UNSET,
        semantic_splitter_node_parser: OptionalNullable[
            Union[models.SemanticChunking, models.SemanticChunkingTypedDict]
        ] = UNSET,
        sentence_splitter: OptionalNullable[
            Union[models.SentenceChunking, models.SentenceChunkingTypedDict]
        ] = UNSET,
        token_text_splitter: OptionalNullable[
            Union[models.TokenTextChunking, models.TokenTextChunkingTypedDict]
        ] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.UpdateChunkingStrategyResponse:
        r"""Update Chunking Strategy

        :param datasource_id:
        :param customer_id: Customer ID
        :param code_splitter:
        :param html_node_parser:
        :param json_node_parser:
        :param markdown_node_parser:
        :param semantic_splitter_node_parser:
        :param sentence_splitter:
        :param token_text_splitter:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.UpdateChunkingStrategyRequest1(
            datasource_id=datasource_id,
            customer_id=customer_id,
            update_chunking_strategy_request=models.UpdateChunkingStrategyRequest(
                code_splitter=utils.get_pydantic_model(
                    code_splitter, OptionalNullable[models.CodeChunking]
                ),
                html_node_parser=utils.get_pydantic_model(
                    html_node_parser, OptionalNullable[models.HTMLChunking]
                ),
                json_node_parser=utils.get_pydantic_model(
                    json_node_parser, OptionalNullable[models.JSONNodeChunking]
                ),
                markdown_node_parser=utils.get_pydantic_model(
                    markdown_node_parser, OptionalNullable[models.MarkdownNodeChunking]
                ),
                semantic_splitter_node_parser=utils.get_pydantic_model(
                    semantic_splitter_node_parser,
                    OptionalNullable[models.SemanticChunking],
                ),
                sentence_splitter=utils.get_pydantic_model(
                    sentence_splitter, OptionalNullable[models.SentenceChunking]
                ),
                token_text_splitter=utils.get_pydantic_model(
                    token_text_splitter, OptionalNullable[models.TokenTextChunking]
                ),
            ),
        )

        req = self._build_request_async(
            method="PUT",
            path="/datasource/{datasource_id}/chunking_strategy",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.update_chunking_strategy_request,
                False,
                False,
                "json",
                models.UpdateChunkingStrategyRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 60000, 1.5, 3600000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["5XX"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="update_chunking_strategy",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.UpdateChunkingStrategyResponse, http_res
            )
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                models.HTTPValidationErrorData, http_res
            )
            raise models.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)

        raise models.APIError("Unexpected response received", http_res)

    def delete_chunking_strategy(
        self,
        *,
        datasource_id: str,
        customer_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.DeleteChunkingStrategyResponse:
        r"""Delete Chunking Strategy

        :param datasource_id:
        :param customer_id: Customer ID
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.DeleteChunkingStrategyRequest(
            datasource_id=datasource_id,
            customer_id=customer_id,
        )

        req = self._build_request(
            method="DELETE",
            path="/datasource/{datasource_id}/chunking_strategy",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 60000, 1.5, 3600000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["5XX"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="delete_chunking_strategy",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.DeleteChunkingStrategyResponse, http_res
            )
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                models.HTTPValidationErrorData, http_res
            )
            raise models.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)

        raise models.APIError("Unexpected response received", http_res)

    async def delete_chunking_strategy_async(
        self,
        *,
        datasource_id: str,
        customer_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.DeleteChunkingStrategyResponse:
        r"""Delete Chunking Strategy

        :param datasource_id:
        :param customer_id: Customer ID
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.DeleteChunkingStrategyRequest(
            datasource_id=datasource_id,
            customer_id=customer_id,
        )

        req = self._build_request_async(
            method="DELETE",
            path="/datasource/{datasource_id}/chunking_strategy",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 60000, 1.5, 3600000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["5XX"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="delete_chunking_strategy",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.DeleteChunkingStrategyResponse, http_res
            )
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                models.HTTPValidationErrorData, http_res
            )
            raise models.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError("API error occurred", http_res, http_res_text)

        raise models.APIError("Unexpected response received", http_res)
